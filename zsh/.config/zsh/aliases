## Replacement Aliases ###
# alias hist="cat -n ${HOME}/.bash_history"

### utility aliasees ###
alias cidr="cat ${ZDOTDIR}/.cidr"
alias reload="source ${HOME}/.zshrc"

### Editing Aliases ###
alias aliases="$EDITOR ${HOME}/.aliases && source ${HOME}/.aliases"
alias todo="$EDITOR ${HOME}/org/TODO.md"
alias bare_ssh="ssh -F /dev/null -oIdentityAgent=no"

function key_fingerprint() {
    # Generate an md5 fingerprint from a private key
    # validate against fingerprint on AWS
    key_file="$1"
    openssl pkey -in "$key_file" -pubout -outform DER | openssl md5 -c
}

function site_fingerprint() {
    site="$1"
    # filter https
    site="$(echo $site | sed 's_https://__')"
    # echo $site
    # return
    openssl s_client -connect "${site}":443 < /dev/null 2>/dev/null | \
        openssl x509 -fingerprint -noout -in /dev/stdin
}

function gocoverage() {
    go test ./... \
        -coverprofile=coverage.out \
        && go tool cover \
        -html=coverage.out \
        && rm coverage.out
}

function check_ssl_expiry() {
    local site
    site="$1"

    printf '\n' | timeout 5 openssl s_client \
        -connect "${site}:443" \
        -servername "${site}" 2>/dev/null \
        | openssl x509 -noout -dates
}

function git-clean-all() {
    local cwd dir
    cwd="$(pwd)"

    for dir in *; do
        git --work-tree="$cwd/$dir" --git-dir="$cwd/$dir/.git" clean -xdff
    done
}

# shim / lazy load nvm because it's incredibly slow
function nvm() {
    local nvm_sh="$HOME/.nvm/nvm.sh"
    if ! [ -e "$nvm_sh" ]; then
        echo "INFO: Install nvm to $HOME/.nvm/nvm.sh first"
        return
    fi

    # undefine this function
    unset -f nvm
    # read the actual nvm file on demand
    source "$HOME/.nvm/nvm.sh"
    # shim our arguments back to actual nvm
    nvm $*
}

tcptunnel() {
    bastionhost="$1"
    targethost="$2"
    port="$3"

    if [ -z "$port" ]; then
        port="3389"
    fi

    ssh-add -K "${bastionkey}"
    ssh -f  \
        -L "${port}:${targethost}:${port}" \
        "$bastionhost" \
        sleep 30

    ssh_pid="$!"

    /bin/echo "$ssh_pid" >/tmp/tcptunnel.pid
}

myrdp() {
    bastionhost="$1"
    targethost="$2"
    user="$3"
    port="$4"

    if [ -z "bastionhost" ] || [ -z "$targethost" ]; then
        echo 'myrdp <jumpbox> <target rdp host or ip>'
        echo 'EG: myrdp access.example.com 10.10.10.10'
        return
    fi

    if [ -z "$port" ]; then
        port="3389"
    fi

    if [ -z "$user" ]; then
        user="Administrator"
    fi

    if [ -z "$RDP_PASSWORD" ]; then
        printf "Set RDP_PASSWORD (no echo): "
        # disable echo tty
        stty -echo \
            && read -r RDP_PASSWORD \
        # enable echo tty
        stty echo; printf '\n'

        if [ -z "$RDP_PASSWORD" ]; then
            printf "ERR: No RDP_PASSWORD suppliced"
            return
        fi
    fi

    # -f backgrounds properly
    # if no connection attempts are  made in 10s, ssh exits
    ssh -f  \
        -L "${port}:${targethost}:${port}" \
        "$bastionhost" \
        sleep 22

    xfreerdp \
        /u:"${user}" \
        /v:localhost \
        /cert:ignore \
        /p:"$RDP_PASSWORD" \
        /dynamic-resolution \
        +drives
}

if [ "$KERNEL" = "darwin" ]; then
    # alias lockscreen="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"
    alias ls="ls -G $@"
    alias lockscreen="pmset displaysleepnow"

    function bannertime() {
        defaults write com.apple.notificationcenterui bannerTime $@
    }
elif [ "$KERNEL" = "linux" ] || [ "$KERNEL" = "microsoft" ]; then
    alias ls="ls --color $@"

    function temps() {
        watch \
            'printf "GPU:\t\t+%sÂ°C\n" \
             $(nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader);
             sensors coretemp-isa-0000 | grep C'

    }

    function pacman-clean() {
        sudo pacman -Rsn $(pacman -Qdtq)
    }
fi
